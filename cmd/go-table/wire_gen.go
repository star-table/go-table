// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/star-table/go-table/internal/biz"
	"github.com/star-table/go-table/internal/conf"
	"github.com/star-table/go-table/internal/data"
	"github.com/star-table/go-table/internal/server"
	"github.com/star-table/go-table/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/nacos-group/nacos-sdk-go/common/constant"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, arg []constant.ServerConfig, clientConfig constant.ClientConfig, logger log.Logger) (*kratos.App, func(), error) {
	gormDBData := data.NewGormDBData(confData)
	cmdable := data.NewRedisCmd(confData, logger)
	dataData, cleanup, err := data.NewData(gormDBData, cmdable, logger)
	if err != nil {
		return nil, nil, err
	}
	tableCache := data.NewTableCache(dataData, logger)
	tableRepo := data.NewTableRepo(dataData, tableCache, logger)
	lockRepo := data.NewLockRepo(dataData, logger)
	discovery := data.NewDiscovery(arg, clientConfig)
	appRepo := data.NewAppRepo(confData, discovery, logger)
	datacenterRepo := data.NewDatacenterRepo(confData, discovery, logger)
	formRepo := data.NewFormRepo(confData, discovery, logger)
	rowRepo := data.NewRowRepo(dataData, formRepo, logger)
	rowUseCase := biz.NewRowUseCase(tableRepo, rowRepo, lockRepo, datacenterRepo, appRepo, logger)
	orgColumnsCache := data.NewOrgColumnsCache(dataData, logger)
	orgColumnsRepo := data.NewOrgColumnsRepo(dataData, orgColumnsCache, logger)
	permissionRepo := data.NewPermissionRepo(confData, discovery, logger)
	pushHTTPClient := data.NewGoPushRepo(confData, discovery, logger)
	projectRepo := data.NewProjectRepo(confData, discovery, logger)
	tableUseCase := biz.NewTableUseCase(tableRepo, lockRepo, appRepo, datacenterRepo, rowUseCase, orgColumnsRepo, permissionRepo, pushHTTPClient, projectRepo, logger)
	orgColumnsUseCase := biz.NewOrgColumnsUseCase(orgColumnsRepo, tableRepo, logger)
	tableService := service.NewTableService(tableUseCase, rowUseCase, orgColumnsUseCase, logger)
	rowsService := service.NewRowsService(rowUseCase, logger)
	pingService := service.NewPingService(logger)
	httpServer := server.NewHTTPServer(confServer, tableService, rowsService, pingService, logger)
	grpcServer := server.NewGRPCServer(confServer, tableService, rowsService, logger)
	registrar := server.NewRegistrar(arg, clientConfig)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
