// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package output

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/star-table/go-table/internal/data/po/gen/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newLcAppFormBase(db *gorm.DB) lcAppFormBase {
	_lcAppFormBase := lcAppFormBase{}

	_lcAppFormBase.lcAppFormBaseDo.UseDB(db)
	_lcAppFormBase.lcAppFormBaseDo.UseModel(&model.LcAppFormBase{})

	tableName := _lcAppFormBase.lcAppFormBaseDo.TableName()
	_lcAppFormBase.ALL = field.NewField(tableName, "*")
	_lcAppFormBase.ID = field.NewInt64(tableName, "id")
	_lcAppFormBase.OrgID = field.NewInt64(tableName, "org_id")
	_lcAppFormBase.Config = field.NewString(tableName, "config")
	_lcAppFormBase.Status = field.NewInt32(tableName, "status")
	_lcAppFormBase.Creator = field.NewInt64(tableName, "creator")
	_lcAppFormBase.CreateTime = field.NewTime(tableName, "create_time")
	_lcAppFormBase.Updator = field.NewInt64(tableName, "updator")
	_lcAppFormBase.UpdateTime = field.NewTime(tableName, "update_time")
	_lcAppFormBase.Version = field.NewInt32(tableName, "version")
	_lcAppFormBase.DelFlag = field.NewInt32(tableName, "del_flag")

	_lcAppFormBase.fillFieldMap()

	return _lcAppFormBase
}

type lcAppFormBase struct {
	lcAppFormBaseDo lcAppFormBaseDo

	ALL        field.Field
	ID         field.Int64
	OrgID      field.Int64
	Config     field.String
	Status     field.Int32
	Creator    field.Int64
	CreateTime field.Time
	Updator    field.Int64
	UpdateTime field.Time
	Version    field.Int32
	DelFlag    field.Int32

	fieldMap map[string]field.Expr
}

func (l lcAppFormBase) Table(newTableName string) *lcAppFormBase {
	l.lcAppFormBaseDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcAppFormBase) As(alias string) *lcAppFormBase {
	l.lcAppFormBaseDo.DO = *(l.lcAppFormBaseDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcAppFormBase) updateTableName(table string) *lcAppFormBase {
	l.ALL = field.NewField(table, "*")
	l.ID = field.NewInt64(table, "id")
	l.OrgID = field.NewInt64(table, "org_id")
	l.Config = field.NewString(table, "config")
	l.Status = field.NewInt32(table, "status")
	l.Creator = field.NewInt64(table, "creator")
	l.CreateTime = field.NewTime(table, "create_time")
	l.Updator = field.NewInt64(table, "updator")
	l.UpdateTime = field.NewTime(table, "update_time")
	l.Version = field.NewInt32(table, "version")
	l.DelFlag = field.NewInt32(table, "del_flag")

	l.fillFieldMap()

	return l
}

func (l *lcAppFormBase) WithContext(ctx context.Context) *lcAppFormBaseDo {
	return l.lcAppFormBaseDo.WithContext(ctx)
}

func (l lcAppFormBase) TableName() string { return l.lcAppFormBaseDo.TableName() }

func (l *lcAppFormBase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcAppFormBase) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["org_id"] = l.OrgID
	l.fieldMap["config"] = l.Config
	l.fieldMap["status"] = l.Status
	l.fieldMap["creator"] = l.Creator
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["updator"] = l.Updator
	l.fieldMap["update_time"] = l.UpdateTime
	l.fieldMap["version"] = l.Version
	l.fieldMap["del_flag"] = l.DelFlag
}

func (l lcAppFormBase) clone(db *gorm.DB) lcAppFormBase {
	l.lcAppFormBaseDo.ReplaceDB(db)
	return l
}

type lcAppFormBaseDo struct{ gen.DO }

func (l lcAppFormBaseDo) Debug() *lcAppFormBaseDo {
	return l.withDO(l.DO.Debug())
}

func (l lcAppFormBaseDo) WithContext(ctx context.Context) *lcAppFormBaseDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcAppFormBaseDo) Clauses(conds ...clause.Expression) *lcAppFormBaseDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcAppFormBaseDo) Returning(value interface{}, columns ...string) *lcAppFormBaseDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcAppFormBaseDo) Not(conds ...gen.Condition) *lcAppFormBaseDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcAppFormBaseDo) Or(conds ...gen.Condition) *lcAppFormBaseDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcAppFormBaseDo) Select(conds ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcAppFormBaseDo) Where(conds ...gen.Condition) *lcAppFormBaseDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcAppFormBaseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *lcAppFormBaseDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcAppFormBaseDo) Order(conds ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcAppFormBaseDo) Distinct(cols ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcAppFormBaseDo) Omit(cols ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcAppFormBaseDo) Join(table schema.Tabler, on ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcAppFormBaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcAppFormBaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcAppFormBaseDo) Group(cols ...field.Expr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcAppFormBaseDo) Having(conds ...gen.Condition) *lcAppFormBaseDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcAppFormBaseDo) Limit(limit int) *lcAppFormBaseDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcAppFormBaseDo) Offset(offset int) *lcAppFormBaseDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcAppFormBaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lcAppFormBaseDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcAppFormBaseDo) Unscoped() *lcAppFormBaseDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcAppFormBaseDo) Create(values ...*model.LcAppFormBase) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcAppFormBaseDo) CreateInBatches(values []*model.LcAppFormBase, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcAppFormBaseDo) Save(values ...*model.LcAppFormBase) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcAppFormBaseDo) First() (*model.LcAppFormBase, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LcAppFormBase), nil
	}
}

func (l lcAppFormBaseDo) Take() (*model.LcAppFormBase, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LcAppFormBase), nil
	}
}

func (l lcAppFormBaseDo) Last() (*model.LcAppFormBase, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LcAppFormBase), nil
	}
}

func (l lcAppFormBaseDo) Find() ([]*model.LcAppFormBase, error) {
	result, err := l.DO.Find()
	return result.([]*model.LcAppFormBase), err
}

func (l lcAppFormBaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LcAppFormBase, err error) {
	buf := make([]*model.LcAppFormBase, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcAppFormBaseDo) FindInBatches(result *[]*model.LcAppFormBase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcAppFormBaseDo) Attrs(attrs ...field.AssignExpr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcAppFormBaseDo) Assign(attrs ...field.AssignExpr) *lcAppFormBaseDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcAppFormBaseDo) Joins(field field.RelationField) *lcAppFormBaseDo {
	return l.withDO(l.DO.Joins(field))
}

func (l lcAppFormBaseDo) Preload(field field.RelationField) *lcAppFormBaseDo {
	return l.withDO(l.DO.Preload(field))
}

func (l lcAppFormBaseDo) FirstOrInit() (*model.LcAppFormBase, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LcAppFormBase), nil
	}
}

func (l lcAppFormBaseDo) FirstOrCreate() (*model.LcAppFormBase, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LcAppFormBase), nil
	}
}

func (l lcAppFormBaseDo) FindByPage(offset int, limit int) (result []*model.LcAppFormBase, count int64, err error) {
	if limit <= 0 {
		count, err = l.Count()
		return
	}

	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Count()
	return
}

func (l lcAppFormBaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l *lcAppFormBaseDo) withDO(do gen.Dao) *lcAppFormBaseDo {
	l.DO = *do.(*gen.DO)
	return l
}
